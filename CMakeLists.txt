# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(galois_ring
	VERSION
		0.1.0
	DESCRIPTION
		"math library"
)

# Target: grlib
set(grlib_SOURCES
	"lib/gring.h"
	"lib/grlifttables.h"
	"lib/grmodtables.h"
	"lib/random.h"
)

add_library(grlib INTERFACE)

target_sources(grlib INTERFACE ${grlib_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${grlib_SOURCES})

target_compile_features(grlib INTERFACE
	cxx_std_20
)

target_include_directories(grlib INTERFACE
	lib
	"third_party/XKCP/bin/compact/libXKCP.a.headers"
)

target_link_libraries(grlib INTERFACE
	"${CMAKE_CURRENT_SOURCE_DIR}/third_party/XKCP/bin/compact/libXKCP.a"
)

# Target: mpcbenchmark
set(mpcbenchmark_SOURCES
	cmake.toml
	"lib/compresscheck.h"
	"lib/innprodcheck.h"
	"lib/lagrange.h"
	"lib/saccheck.h"
	"src/benchmark_MPC.cc"
)

add_executable(mpcbenchmark)

target_sources(mpcbenchmark PRIVATE ${mpcbenchmark_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${mpcbenchmark_SOURCES})

target_compile_features(mpcbenchmark PRIVATE
	cxx_std_20
)

target_compile_options(mpcbenchmark PRIVATE
	-msse4.1
	-march=native
)

target_link_libraries(mpcbenchmark PRIVATE
	grlib
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT mpcbenchmark)
endif()

# Target: demo
set(demo_SOURCES
	cmake.toml
	"lib/compresscheck.h"
	"lib/innprodcheck.h"
	"lib/lagrange.h"
	"lib/saccheck.h"
	"src/demo.cc"
)

add_executable(demo)

target_sources(demo PRIVATE ${demo_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${demo_SOURCES})

target_compile_features(demo PRIVATE
	cxx_std_20
)

target_compile_options(demo PRIVATE
	-msse4.1
	-march=native
)

target_link_libraries(demo PRIVATE
	grlib
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT demo)
endif()

# Target: kaperformance
set(kaperformance_SOURCES
	cmake.toml
	"src/test_ka.cc"
)

add_executable(kaperformance)

target_sources(kaperformance PRIVATE ${kaperformance_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${kaperformance_SOURCES})

target_compile_features(kaperformance PRIVATE
	cxx_std_20
)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(kaperformance PRIVATE
		-Wall
	)
endif()

target_link_libraries(kaperformance PRIVATE
	grlib
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT kaperformance)
endif()
