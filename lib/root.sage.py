

# This file was *autogenerated* from the file root.sage
from sage.all_cmdline import *   # import sage library

_sage_const_64 = Integer(64); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1000 = Integer(1000)
import itertools
try:
    from tqdm import trange as range
except ImportError:
    pass
    
k = _sage_const_64 
P1 = Zmod(_sage_const_2 **k)["z"]; (z,) = P1._first_ngens(1)
def mkring(d, **kw):
    return P1.quo(P1(GF(_sage_const_2 **d, name="z", modulus="minimal_weight").modulus().list()), **kw)

R1 = mkring(_sage_const_4 , names=('w',)); (w,) = R1._first_ngens(1)
print(R1)
R2 = mkring(_sage_const_16 , names=('z',)); (z,) = R2._first_ngens(1)
print(R2)
P2 = R2["x"]; (x,) = P2._first_ngens(1)

def naive():
    hom = P2(R1.modulus().list()).any_root()
    return lambda x: x.lift()(x = hom)


F = GF(_sage_const_2 )
def lift_root():
    F1 = F.extension(R1.modulus().change_ring(F), name='z')
    F2 = F.extension(R2.modulus().change_ring(F), name='z')
    root = [ZZ(x) for x in R1.modulus().change_ring(F2).any_root().list()]
    for i in range(_sage_const_1 , k):
        R3 = Zmod(_sage_const_2 **(i + _sage_const_1 ))['z'].quo(R2.modulus().change_ring(Zmod(_sage_const_2 **(i + _sage_const_1 ))), names=("z",))
        M = R1.modulus().change_ring(R3)
        # TODO: can we do something smarter than this enumeration? :)
        for top in itertools.product([_sage_const_0 , _sage_const_1 ], repeat=F2.degree()):
            new_root = [x + t * _sage_const_2 **i for x, t in zip(root, top)]
            if (M(z = R3(new_root))) == _sage_const_0 :
                root = new_root
                break
        else:
            assert False, "Couldn't lift"
    hom = R2(root)
    return lambda x: x.lift()(z = hom)

φ = lift_root()

def test():
    a = R1.random_element()
    b = R1.random_element()
    assert φ(-a) == -φ(a)
    assert φ(a + b) == φ(a) + φ(b)
    assert φ(a + b) == φ(a) + φ(b)
    assert a != φ(a)
    assert φ(a).parent() is R2

for _ in range(_sage_const_1000 ):
    test()
print("Success")



