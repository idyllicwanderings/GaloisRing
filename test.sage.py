

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# F1 = GF(2^2, 'α', modulus="minimal_weight")
# F2 = GF(2^4, 'β', modulus="minimal_weight")


# print(F2.modulus())
# print(F1.modulus().isprimitive())
# print(F2.modulus().isprimitive())
# print("GF roots:",F2['x'](F1.modulus()).roots()[0][0])


# Z2 = IntegerModRing(2)

# Z22 = QuotientRing(Z2['x'], x^2+ x+ 1)

# Z24 = QuotientRing(Z2['x'], x^4 +x^3+x^2+x+1)

# image = Z24['x'](Z22.modulus()).roots(multiplicities=False)

# print(image)


# test
F1 = GF(_sage_const_2 **_sage_const_2 , 'β', modulus="minimal_weight")
F2 = GF(_sage_const_2 **_sage_const_4 , 'α', modulus="minimal_weight")
# F3 = GF(2^8, 'c', modulus="minimal_weight")
# 
# aa = F3['x'](F1.modulus()).roots()[0][0]
# res = set()
# embeddings = []
# for i in range(4):
#     embeddings.append(aa^i)
# 
# for b in range(2^4):
#     tmp = F3(0);
#     for i in range(4):
#         if b & (1 << i):
#             tmp += embeddings[i]
#     res.add(tmp)
# 
print(F1.modulus())
print(F2.modulus())
print(F1.modulus().is_primitive())
print(F2.modulus().is_primitive())
print("GF roots: ", F2['x'](F1.modulus()).roots())
# print(F3['x'](F1.modulus()).roots())
# print("res =", res)
# print(len(res))

Z2 = IntegerModRing(_sage_const_2 **_sage_const_4 )
Z2X = PolynomialRing(Z2, 'x')
Z22 = QuotientRing(Z2X, x**_sage_const_2 +x+_sage_const_1 )
# Z24 = IntegerModRing(2^4)
Z24 = QuotientRing(Z2X, x**_sage_const_4 +x+_sage_const_1 )

roots_list = Z24['x'](x**_sage_const_2 +x+_sage_const_1 ).roots(multiplicities=False)

print(roots_list)

root_image = roots_list[_sage_const_0 ]

int_mod = Z2.cardinality()
images = [Z24['x'](k) for k in range(int_mod)]
for i in range(_sage_const_1 , Z22.modulus().degree()):
    pre_len = len(images)
    for j in range(_sage_const_1 , int_mod):
        images += [(elem + Z24['x'](j) * root_image**i) for elem in images[:pre_len]]

# a * x + b (0 <= a, b <= 2^4 - 1)
print(images)
print(len(images))

for a in images:
    for b in images:
        if not ((a + b) in images and (a * b) in images):
            print("Error")
            break

# print(root_image)

print(root_image**_sage_const_2  + root_image + _sage_const_1 )
# print(res[2] + res[2])

